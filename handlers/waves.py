# handlers/waves.py
import json
import re
import logging
from pathlib import Path
from typing import List
from html import escape

from aiogram import Router, F
from aiogram.types import Message

logger = logging.getLogger(__name__)
router = Router()

# ======= –ü–£–¢–¨ –ö –§–ê–ô–õ–£ (–∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞) =======
WAVES_JSON_PATH = (Path(__file__).resolve().parent.parent / "waves.json")

# ======= –û–§–û–†–ú–õ–ï–ù–ò–ï =======
SEP_TOP = "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
SEP_BOT = "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
MAP_EMOJI  = "üó∫Ô∏è"
MODS_EMOJI = "üß™"

# ======= –£–¢–ò–õ–ò–¢–´ =======

async def _sender_is_admin(message: Message) -> bool:
    try:
        cm = await message.bot.get_chat_member(message.chat.id, message.from_user.id)
        return cm.status in {"creator", "administrator"}
    except Exception:
        return False

def _strip_number_prefix(s: str) -> str:
    return re.sub(r"^\s*\d+[\.\)\-:]*\s*", "", s).strip()

def _smart_cap(s: str) -> str:
    s = s.strip()
    return (s[:1].upper() + s[1:].lower()) if s else s

def _parse_save_payload(text: str):
    """
    –§–æ—Ä–º–∞—Ç:
    !–∑–∞–ø–∏—Å–∞—Ç—å–≤–æ–ª–Ω—ã
    –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
    –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
    1. —Ö–∏–∂–∏–Ω–∞, –ª–µ—Å, –ª–µ—Å
    ...
    (—Ä–æ–≤–Ω–æ 15 —Å—Ç—Ä–æ–∫)
    """
    lines = [ln.rstrip() for ln in text.splitlines()]

    if len(lines) < 4:
        raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç—Ä–æ–∫. –ù—É–∂–Ω—ã: –∫–æ–º–∞–Ω–¥–∞, –∫–∞—Ä—Ç–∞, –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã, 15 —Å—Ç—Ä–æ–∫ –≤–æ–ª–Ω.")

    title = lines[1].strip()
    mods  = lines[2].strip()
    waves_raw = [ln.strip() for ln in lines[3:] if ln.strip()]
    waves = [_strip_number_prefix(w) for w in waves_raw]

    if not title:
        raise ValueError("–ü—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã.")
    if not mods:
        raise ValueError("–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤.")
    if len(waves) != 15:
        raise ValueError(f"–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–æ–≤–Ω–æ 15 –≤–æ–ª–Ω, —Å–µ–π—á–∞—Å: {len(waves)}.")

    for idx, w in enumerate(waves, start=1):
        parts = [p.strip() for p in w.split(",")]
        if len(parts) != 3:
            raise ValueError(f"–í –≤–æ–ª–Ω–µ {idx} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–æ–≤–Ω–æ 3 —Å–ø–∞–≤–Ω–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –ù–∞—à—ë–ª: '{w}'")

    return title, mods, waves

def _atomic_write_json(path: Path, data: dict):
    path.parent.mkdir(parents=True, exist_ok=True)
    tmp = path.with_suffix(".tmp")
    tmp.write_text(json.dumps(data, ensure_ascii=False, indent=2), encoding="utf-8")
    tmp.replace(path)

def _format_html(title: str, mods: str, waves: List[str]) -> str:
    """
    HTML-–≤—ã–≤–æ–¥:
    - –ö–∞—Ä—Ç–∞/–º–æ–¥—ã –∫–∞–∫ –≤ –¢–ó.
    - –í–æ–ª–Ω—ã: –∫—É—Ä—Å–∏–≤ –¥–ª—è –Ω–æ–º–µ—Ä–∞, –ø–æ–¥—á—ë—Ä–∫–Ω—É—Ç—ã–µ —Å–ø–∞–≤–Ω—ã; –¥–ª—è 3/6/9/12/15 ‚Äî –µ—â—ë –∏ –∂–∏—Ä–Ω—ã–µ.
    - –°–ø–∞–≤–Ω—ã –∞–≤—Ç–æ-–∫–∞–ø–∏—Ç–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è: '–ª–µ—Å' -> '–õ–µ—Å'
    - –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ 3, 6, 9 –∏ 12 –≤–æ–ª–Ω.
    """
    out: List[str] = []
    out.append(SEP_TOP)
    out.append(f"{MAP_EMOJI} –ö–∞—Ä—Ç–∞: <b>{escape(title)}</b>")
    out.append(f"{MODS_EMOJI} –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã:")
    out.append(f"<b>{escape(mods)}</b>")
    out.append(SEP_TOP)

    for i, w in enumerate(waves, start=1):
        parts = [p.strip() for p in w.split(",")]
        parts = [_smart_cap(p) for p in parts]

        # –∫–∞–∂–¥–∞—è 3-—è –≤–æ–ª–Ω–∞ ‚Äî –∂–∏—Ä–Ω—ã–º
        if i % 3 == 0:
            parts_fmt = [f"<u><b>{escape(p)}</b></u>" for p in parts]
        else:
            parts_fmt = [f"<u>{escape(p)}</u>" for p in parts]

        line = f"<i>{i}.</i> " + ", ".join(parts_fmt)
        out.append(line)

        # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ 3, 6, 9, 12 (–Ω–æ –Ω–µ –ø–æ—Å–ª–µ 15)
        if i % 3 == 0 and i != 15:
            out.append("")

    out.append(SEP_BOT)
    return "\n".join(out)

# ======= –•–ï–ù–î–õ–ï–†–´ =======
# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—ç–∫—Å–ø-—Ñ–∏–ª—å—Ç—Ä—ã (–±–µ–∑ helper-–ª—è–º–±–¥), —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å NameError
@router.message(F.text.regexp(r"^\s*!–∑–∞–ø–∏—Å–∞—Ç—å–≤–æ–ª–Ω—ã\b"))
async def cmd_save_waves(message: Message):
    if not await _sender_is_admin(message):
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    try:
        title, mods, waves = _parse_save_payload(message.text or "")
        data = {"title": title, "mods": mods, "waves": waves}
        _atomic_write_json(WAVES_JSON_PATH, data)
        await message.reply(f"‚úÖ –í–æ–ª–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {WAVES_JSON_PATH.name}")
    except Exception as e:
        await message.reply(
            "‚ùå –û—à–∏–±–∫–∞: " + str(e) +
            "\n\n–û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç:\n"
            "!–∑–∞–ø–∏—Å–∞—Ç—å–≤–æ–ª–Ω—ã\n"
            "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã\n"
            "–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤\n"
            "1. —Ö–∏–∂–∏–Ω–∞, –ª–µ—Å, –ª–µ—Å\n"
            "2. –ª–µ—Å, –ª–µ—Å, –ø–ª—è–∂\n"
            "...\n(–≤—Å–µ–≥–æ 15 —Å—Ç—Ä–æ–∫)"
        )

@router.message(F.text.regexp(r"^\s*!–≤–æ–ª–Ω—ã\b"))
async def cmd_show_waves(message: Message):
    if not WAVES_JSON_PATH.exists():
        await message.reply("‚ö†Ô∏è waves.json –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω. –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ !–∑–∞–ø–∏—Å–∞—Ç—å–≤–æ–ª–Ω—ã.")
        return
    try:
        data = json.loads(WAVES_JSON_PATH.read_text(encoding="utf-8"))
        title = str(data.get("title", "")).strip()
        mods  = str(data.get("mods", "")).strip()
        waves = data.get("waves", [])
        if not isinstance(waves, list) or len(waves) != 15:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç 'waves' –≤ —Ñ–∞–π–ª–µ.")
        text = _format_html(title, mods, waves)
        await message.reply(text, parse_mode="HTML")
    except Exception as e:
        await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å waves.json: {e}")
