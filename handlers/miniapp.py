#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Telegram Bot handler –¥–ª—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Tsushima
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç WebApp
"""

import asyncio
import aiohttp
import json
import logging
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo, InputMediaPhoto
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ChatMemberStatus

from config import (
    MINI_APP_URL, API_BASE_URL, BOT_TOKEN, CONGRATULATIONS_CHAT_ID
)

logger = logging.getLogger(__name__)
router = Router()

@router.message(Command("start"))
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = message.from_user
    
    welcome_text = f"""–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–Ø –±–æ—Ç Tsushima.Ru, –Ω–æ –¥—Ä—É–∑—å—è –∑–æ–≤—É—Ç –º–µ–Ω—è –ú–µ—Å—Ç–Ω—ã–π –ì—ë–¥–∑–µ–Ω.

‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ—é –∏ —á—É–∂–∏–µ –∞–Ω–∫–µ—Ç—ã
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –±–∏–ª–¥—ã –∏ –¥–µ–ª–∏—Ç—å—Å—è –∏–º–∏

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –æ—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π WebApp
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="–û—Ç–∫—Ä—ã—Ç—å",
        web_app=WebAppInfo(url=f"{MINI_APP_URL}")
    ))
    
    await message.answer(welcome_text, reply_markup=builder.as_markup())

@router.message(Command("build", "–±–∏–ª–¥"))
async def build_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /build <ID> –∏–ª–∏ /–±–∏–ª–¥ <ID>"""
    args = message.text.split()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞
    if len(args) < 2:
        await message.reply(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /build <ID>\n"
            "–ü—Ä–∏–º–µ—Ä: /build 12",
            parse_mode="HTML"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ ID - —á–∏—Å–ª–æ
    try:
        build_id = int(args[1])
    except ValueError:
        await message.reply("‚ùå ID –±–∏–ª–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–∏–ª–¥–∞
    build_data, error_message = await fetch_build_data(build_id)
    
    if error_message:
        await message.reply(f"‚ùå {error_message}")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
    await send_build_media_group(message, build_data)

async def fetch_build_data(build_id: int) -> tuple:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –±–∏–ª–¥–∞ –ø–æ ID –∏–∑ API
    
    Returns:
        tuple: (build_data: dict|None, error_message: str|None)
    """
    logger.info(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±–∏–ª–¥ {build_id} –∏–∑ API")
    try:
        async with aiohttp.ClientSession() as session:
            url = f"{API_BASE_URL}/api/builds.get/{build_id}"
            logger.info(f"URL –∑–∞–ø—Ä–æ—Å–∞: {url}")
            async with session.get(url, timeout=aiohttp.ClientTimeout(total=10)) as response:
                logger.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status}")
                if response.status == 404:
                    logger.warning(f"–ë–∏–ª–¥ {build_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return None, "–ë–∏–ª–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"
                elif response.status == 403:
                    data = await response.json()
                    if data.get('is_private'):
                        logger.warning(f"–ë–∏–ª–¥ {build_id} –ø—Ä–∏–≤–∞—Ç–Ω—ã–π")
                        return None, "–ë–∏–ª–¥ –Ω–∞–π–¥–µ–Ω, –Ω–æ –æ–Ω –ø—Ä–∏–≤–∞—Ç–Ω—ã–π"
                    return None, "–î–æ—Å—Ç—É–ø –∫ –±–∏–ª–¥—É –∑–∞–ø—Ä–µ—â–µ–Ω"
                elif response.status == 200:
                    data = await response.json()
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –±–∏–ª–¥–∞: {data}")
                    return data.get('build'), None
                else:
                    logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å API: {response.status}")
                    return None, f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (–∫–æ–¥ {response.status})"
    except asyncio.TimeoutError:
        logger.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –±–∏–ª–¥–∞ {build_id}")
        return None, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"
    except aiohttp.ClientError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –±–∏–ª–¥–∞ {build_id}: {e}")
        return None, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –±–∏–ª–¥–∞ {build_id}: {e}")
        return None, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞"

async def send_build_media_group(message: Message, build_data: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –±–∏–ª–¥ –∫–∞–∫ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É —Å 2 —Ñ–æ—Ç–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–∏–ª–¥–µ
    tags_text = ', '.join(build_data.get('tags', [])) if build_data.get('tags') else '‚Äî'
    description_text = build_data.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
    
    caption = f"""üõ†Ô∏è <b>{build_data['name']}</b>

üë§ <b>–ê–≤—Ç–æ—Ä:</b> {build_data.get('author', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
‚öîÔ∏è <b>–ö–ª–∞—Å—Å:</b> {build_data.get('class', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üè∑Ô∏è <b>–¢–µ–≥–∏:</b> {tags_text}

üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
{description_text}"""
    
    media_group = []
    
    # –ü–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
    if build_data.get('photo_1'):
        photo1_url = f"{API_BASE_URL}{build_data['photo_1']}"
        media_group.append(InputMediaPhoto(
            media=photo1_url,
            caption=caption,
            parse_mode="HTML"
        ))
    
    # –í—Ç–æ—Ä–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ (–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)
    if build_data.get('photo_2'):
        photo2_url = f"{API_BASE_URL}{build_data['photo_2']}"
        media_group.append(InputMediaPhoto(media=photo2_url))
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã –∏–ª–∏ –æ—à–∏–±–∫–∏
    if media_group:
        try:
            await message.answer_media_group(media=media_group)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {e}")
            await message.reply(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∏–ª–¥–∞\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –±–∏–ª–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"
            )
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await message.reply(
            f"{caption}\n\n"
            f"‚ö†Ô∏è <i>–£ —ç—Ç–æ–≥–æ –±–∏–ª–¥–∞ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</i>",
            parse_mode="HTML"
        )

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ó–ê–Ø–í–û–ö –ù–ê –ü–û–í–´–®–ï–ù–ò–ï –£–†–û–í–ù–Ø –ú–ê–°–¢–ï–†–°–¢–í–ê ==========

@router.callback_query(F.data.startswith("approve_mastery:"))
async def approve_mastery_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–û–¥–æ–±—Ä–∏—Ç—å' –¥–ª—è –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è"""
    try:
        # –ü–∞—Ä—Å–∏–Ω–≥ callback_data: approve_mastery:{user_id}:{category_key}:{next_level}
        parts = callback.data.split(":")
        if len(parts) != 4:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
        
        _, target_user_id_str, category_key, next_level_str = parts
        target_user_id = int(target_user_id_str)
        next_level = int(next_level_str)
        
        # –ü–æ–ª—É—á–∞–µ–º username –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        moderator_username = callback.from_user.username or callback.from_user.first_name or "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä"
        
        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
        from config import API_BASE_URL, BOT_TOKEN, CONGRATULATIONS_CHAT_ID
        
        data = aiohttp.FormData()
        data.add_field('user_id', str(target_user_id))
        data.add_field('category_key', category_key)
        data.add_field('next_level', str(next_level))
        data.add_field('moderator_username', moderator_username)
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{API_BASE_URL}/api/mastery.approve",
                    data=data,
                    headers={"Authorization": BOT_TOKEN},
                    timeout=aiohttp.ClientTimeout(total=10)
                ) as response:
                    if response.status != 200:
                        error_text = await response.text()
                        logger.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏: {response.status} - {error_text}")
                        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏", show_alert=True)
                        return
                    
                    result = await response.json()
                    
                    if not result.get('success'):
                        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏", show_alert=True)
                        return
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞
                    category_name = result.get('category_name', category_key)
                    level_name = result.get('level_name', f'–£—Ä–æ–≤–µ–Ω—å {next_level}')
                    psn_id = result.get('psn_id', '')
                    username = result.get('username', '')
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π
                    if CONGRATULATIONS_CHAT_ID:
                        try:
                            # –ü–æ–ª—É—á–∞–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Bot API
                            user_mention = psn_id  # fallback –Ω–∞ psn_id
                            try:
                                chat_info = await callback.bot.get_chat(target_user_id)
                                if chat_info.username:
                                    user_mention = f"@{chat_info.username}"
                                elif chat_info.first_name:
                                    user_mention = chat_info.first_name
                                else:
                                    user_mention = psn_id
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}: {e}")
                                user_mention = username if username else psn_id
                            
                            await callback.bot.send_message(
                                chat_id=CONGRATULATIONS_CHAT_ID,
                                text=f"üéâ –£—á–∞—Å—Ç–Ω–∏–∫ {user_mention} ({psn_id}) –ø–æ–≤—ã—Å–∏–ª —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{category_name}</b> ‚Äî –£—Ä–æ–≤–µ–Ω—å {next_level}, {level_name}",
                                parse_mode="HTML"
                            )
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π: {e}")
                    
                    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–æ–Ω–µ—Ü –∏ —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏)
                    try:
                        original_text = callback.message.text or callback.message.caption or ""
                        updated_text = original_text + f"\n\n‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ @{moderator_username}"
                        
                        if callback.message.photo:
                            await callback.message.edit_caption(
                                caption=updated_text,
                                parse_mode="HTML",
                                reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
                            )
                        else:
                            await callback.message.edit_text(
                                text=updated_text,
                                parse_mode="HTML",
                                reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
                            )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    
                    await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!", show_alert=False)
        
        except aiohttp.ClientError as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É", show_alert=True)
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback –¥–∞–Ω–Ω—ã—Ö: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("reject_mastery:"))
async def reject_mastery_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–û—Ç–∫–ª–æ–Ω–∏—Ç—å' –¥–ª—è –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è"""
    try:
        # –ü–∞—Ä—Å–∏–Ω–≥ callback_data: reject_mastery:{user_id}:{category_key}:{next_level}
        parts = callback.data.split(":")
        if len(parts) != 4:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
        
        _, target_user_id_str, category_key, next_level_str = parts
        target_user_id = int(target_user_id_str)
        next_level = int(next_level_str)
        
        # –ü–æ–ª—É—á–∞–µ–º username –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–≥–æ –∫—Ç–æ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É)
        moderator_username = callback.from_user.username or callback.from_user.first_name or "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä"
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        await callback.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", show_alert=True)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
        instruction_msg = await callback.message.reply(
            "‚ùå <b>–ó–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
            parse_mode="HTML"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã
        if not hasattr(reject_mastery_callback, '_pending_rejects'):
            reject_mastery_callback._pending_rejects = {}
        
        original_text = callback.message.text or callback.message.caption or ""
        
        reject_mastery_callback._pending_rejects[instruction_msg.message_id] = {
            'user_id': target_user_id,
            'category_key': category_key,
            'next_level': next_level,
            'original_message_id': callback.message.message_id,
            'instruction_message_id': instruction_msg.message_id,
            'chat_id': callback.message.chat.id,
            'has_photo': callback.message.photo is not None,
            'original_text': original_text,
            'moderator_username': moderator_username
        }
        
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback –¥–∞–Ω–Ω—ã—Ö: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.message(F.reply_to_message)
async def handle_rejection_reason(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å –ø—Ä–∏—á–∏–Ω–æ–π –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è"""
    try:
        replied_message = message.reply_to_message
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
        if not hasattr(reject_mastery_callback, '_pending_rejects'):
            return
        
        pending_key = replied_message.message_id
        if pending_key not in reject_mastery_callback._pending_rejects:
            return
        
        pending_data = reject_mastery_callback._pending_rejects.pop(pending_key)
        target_user_id = pending_data['user_id']
        category_key = pending_data['category_key']
        next_level = pending_data['next_level']
        original_message_id = pending_data['original_message_id']
        instruction_message_id = pending_data['instruction_message_id']
        chat_id = pending_data['chat_id']
        has_photo = pending_data.get('has_photo', False)
        original_text = pending_data.get('original_text', '')
        
        reason = message.text.strip() if message.text else "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        
        # –ü–æ–ª—É—á–∞–µ–º username –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–≥–æ –∫—Ç–æ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É)
        # –ù–æ –Ω–∞–º –Ω—É–∂–µ–Ω username —Ç–æ–≥–æ –∫—Ç–æ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É, –∞ –Ω–µ —Ç–æ–≥–æ –∫—Ç–æ –Ω–∞–ø–∏—Å–∞–ª –ø—Ä–∏—á–∏–Ω—É
        # –°–æ—Ö—Ä–∞–Ω–∏–º –µ–≥–æ –≤ pending_data
        moderator_username = pending_data.get('moderator_username') or message.from_user.username or message.from_user.first_name or "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä"
        
        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
        data = aiohttp.FormData()
        data.add_field('user_id', str(target_user_id))
        data.add_field('category_key', category_key)
        data.add_field('next_level', str(next_level))
        data.add_field('reason', reason)
        data.add_field('moderator_username', moderator_username)
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{API_BASE_URL}/api/mastery.reject",
                    data=data,
                    headers={"Authorization": BOT_TOKEN},
                    timeout=aiohttp.ClientTimeout(total=10)
                ) as response:
                    if response.status != 200:
                        error_text = await response.text()
                        logger.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: {response.status} - {error_text}")
                        await message.reply("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏")
                        return
                    
                    result = await response.json()
                    
                    if not result.get('success'):
                        await message.reply("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏")
                        return
                    
                    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é (—Ç–æ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—á–∞—é—Ç)
                    try:
                        updated_instruction_text = f"""‚ùå <b>–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>

–ö–µ–º: @{moderator_username}
–ü—Ä–∏—á–∏–Ω–∞: {reason}

‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
                        
                        await message.bot.edit_message_text(
                            chat_id=chat_id,
                            message_id=instruction_message_id,
                            text=updated_instruction_text,
                            parse_mode="HTML"
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {e}")
                    
                    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞—è–≤–∫–æ–π (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞)
                    try:
                        if has_photo:
                            await message.bot.edit_message_caption(
                                chat_id=chat_id,
                                message_id=original_message_id,
                                caption=original_text,
                                parse_mode="HTML",
                                reply_markup=None
                            )
                        else:
                            await message.bot.edit_message_text(
                                chat_id=chat_id,
                                message_id=original_message_id,
                                text=original_text,
                                parse_mode="HTML",
                                reply_markup=None
                            )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        except aiohttp.ClientError as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏—á–∏–Ω—ã")
