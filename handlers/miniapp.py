#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Telegram Bot handler –¥–ª—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Tsushima
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç WebApp –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Ç—Ä–æ—Ñ–µ–µ–≤
"""

import asyncio
import aiohttp
import json
import logging
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo, InputMediaPhoto
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ChatMemberStatus

from config import (
    MINI_APP_URL, API_BASE_URL, TROPHY_GROUP_CHAT_ID, TROPHY_GROUP_TOPIC_ID
)

logger = logging.getLogger(__name__)
router = Router()

@router.message(Command("start"))
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = message.from_user
    
    welcome_text = f"""–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–Ø –±–æ—Ç Tsushima.Ru, –Ω–æ –¥—Ä—É–∑—å—è –∑–æ–≤—É—Ç –º–µ–Ω—è –ú–µ—Å—Ç–Ω—ã–π –ì—ë–¥–∑–µ–Ω.

üèÜ –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:
‚Ä¢ –ü–æ–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–æ—Ñ–µ–µ–≤
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞—è–≤–æ–∫
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ—é –∏ —á—É–∂–∏–µ –∞–Ω–∫–µ—Ç—ã
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –±–∏–ª–¥—ã –∏ –¥–µ–ª–∏—Ç—å—Å—è –∏–º–∏

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –æ—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π WebApp
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="üèÜ –û—Ç–∫—Ä—ã—Ç—å",
        web_app=WebAppInfo(url=f"{MINI_APP_URL}")
    ))
    
    await message.answer(welcome_text, reply_markup=builder.as_markup())

@router.message(Command("build", "–±–∏–ª–¥"))
async def build_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /build <ID> –∏–ª–∏ /–±–∏–ª–¥ <ID>"""
    args = message.text.split()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞
    if len(args) < 2:
        await message.reply(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /build <ID>\n"
            "–ü—Ä–∏–º–µ—Ä: /build 12",
            parse_mode="HTML"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ ID - —á–∏—Å–ª–æ
    try:
        build_id = int(args[1])
    except ValueError:
        await message.reply("‚ùå ID –±–∏–ª–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–∏–ª–¥–∞
    build_data, error_message = await fetch_build_data(build_id)
    
    if error_message:
        await message.reply(f"‚ùå {error_message}")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
    await send_build_media_group(message, build_data)

async def fetch_build_data(build_id: int) -> tuple:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –±–∏–ª–¥–∞ –ø–æ ID –∏–∑ API
    
    Returns:
        tuple: (build_data: dict|None, error_message: str|None)
    """
    try:
        async with aiohttp.ClientSession() as session:
            url = f"{API_BASE_URL}/api/builds.get/{build_id}"
            async with session.get(url, timeout=aiohttp.ClientTimeout(total=10)) as response:
                if response.status == 404:
                    return None, "–ë–∏–ª–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"
                elif response.status == 403:
                    data = await response.json()
                    if data.get('is_private'):
                        return None, "–ë–∏–ª–¥ –Ω–∞–π–¥–µ–Ω, –Ω–æ –æ–Ω –ø—Ä–∏–≤–∞—Ç–Ω—ã–π"
                    return None, "–î–æ—Å—Ç—É–ø –∫ –±–∏–ª–¥—É –∑–∞–ø—Ä–µ—â–µ–Ω"
                elif response.status == 200:
                    data = await response.json()
                    return data.get('build'), None
                else:
                    logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å API: {response.status}")
                    return None, f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (–∫–æ–¥ {response.status})"
    except asyncio.TimeoutError:
        logger.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –±–∏–ª–¥–∞ {build_id}")
        return None, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"
    except aiohttp.ClientError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –±–∏–ª–¥–∞ {build_id}: {e}")
        return None, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –±–∏–ª–¥–∞ {build_id}: {e}")
        return None, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞"

async def send_build_media_group(message: Message, build_data: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –±–∏–ª–¥ –∫–∞–∫ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É —Å 2 —Ñ–æ—Ç–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–∏–ª–¥–µ
    tags_text = ', '.join(build_data.get('tags', [])) if build_data.get('tags') else '‚Äî'
    description_text = build_data.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
    
    caption = f"""üõ†Ô∏è <b>{build_data['name']}</b>

üë§ <b>–ê–≤—Ç–æ—Ä:</b> {build_data.get('author', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
‚öîÔ∏è <b>–ö–ª–∞—Å—Å:</b> {build_data.get('class', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üè∑Ô∏è <b>–¢–µ–≥–∏:</b> {tags_text}

üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
{description_text}"""
    
    media_group = []
    
    # –ü–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
    if build_data.get('photo_1'):
        photo1_url = f"{API_BASE_URL}{build_data['photo_1']}"
        media_group.append(InputMediaPhoto(
            media=photo1_url,
            caption=caption,
            parse_mode="HTML"
        ))
    
    # –í—Ç–æ—Ä–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ (–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)
    if build_data.get('photo_2'):
        photo2_url = f"{API_BASE_URL}{build_data['photo_2']}"
        media_group.append(InputMediaPhoto(media=photo2_url))
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã –∏–ª–∏ –æ—à–∏–±–∫–∏
    if media_group:
        try:
            await message.answer_media_group(media=media_group)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {e}")
            await message.reply(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∏–ª–¥–∞\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –±–∏–ª–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"
            )
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await message.reply(
            f"{caption}\n\n"
            f"‚ö†Ô∏è <i>–£ —ç—Ç–æ–≥–æ –±–∏–ª–¥–∞ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</i>",
            parse_mode="HTML"
        )

async def get_trophy_and_user_info(user_id: int, trophy_name: str) -> tuple:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–æ—Ñ–µ—è –∏ PSN ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    display_name = trophy_name
    psn_id = str(user_id)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–æ—Ñ–µ—è
        async with aiohttp.ClientSession() as session:
            trophy_url = f"{API_BASE_URL}/api/trophy_info/{trophy_name}"
            async with session.get(trophy_url) as trophy_response:
                if trophy_response.status == 200:
                    trophy_data = await trophy_response.json()
                    display_name = f"{trophy_data.get('name', trophy_name)} {trophy_data.get('emoji', '')}".strip()
            
            # –ü–æ–ª—É—á–∞–µ–º PSN ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_url = f"{API_BASE_URL}/api/user_info/{user_id}"
            async with session.get(user_url) as user_response:
                if user_response.status == 200:
                    user_data = await user_response.json()
                    psn_id = user_data.get('psn_id', str(user_id))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    return display_name, psn_id

@router.callback_query(F.data.startswith("trophy_approve:"))
async def handle_trophy_approve(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è —Ç—Ä–æ—Ñ–µ—è"""
    await callback.answer()
    
    callback_data = callback.data
    parts = callback_data.split(":")
    
    if len(parts) == 3:
        user_id = int(parts[1])
        trophy_name = parts[2]
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–æ—Ñ–µ—è –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        trophy_display_name, psn_id = await get_trophy_and_user_info(user_id, trophy_name)
        
        success = await approve_trophy(user_id, trophy_name)
        
        if success:
            await callback.message.edit_text(
                f"‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞\n\n–¢—Ä–æ—Ñ–µ–π: {trophy_display_name}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {psn_id}"
            )
        else:
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ —Ç—Ä–æ—Ñ–µ—è"
            )

@router.callback_query(F.data.startswith("trophy_reject:"))
async def handle_trophy_reject(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–∫–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ç—Ä–æ—Ñ–µ—è"""
    await callback.answer()
    
    callback_data = callback.data
    parts = callback_data.split(":")
    
    if len(parts) == 3:
        user_id = int(parts[1])
        trophy_name = parts[2]
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–æ—Ñ–µ—è –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        trophy_display_name, psn_id = await get_trophy_and_user_info(user_id, trophy_name)
        
        success = await reject_trophy(user_id, trophy_name)
        
        if success:
            await callback.message.edit_text(
                f"‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞\n\n–¢—Ä–æ—Ñ–µ–π: {trophy_display_name}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {psn_id}"
            )
        else:
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —Ç—Ä–æ—Ñ–µ—è"
            )

async def approve_trophy(user_id: int, trophy_name: str) -> bool:
    """–û–¥–æ–±—Ä—è–µ—Ç —Ç—Ä–æ—Ñ–µ–π —á–µ—Ä–µ–∑ API"""
    try:
        async with aiohttp.ClientSession() as session:
            url = f"{API_BASE_URL}/api/trophies.approve"
            data = {
                "user_id": user_id,
                "trophy_name": trophy_name
            }
            
            async with session.post(url, data=data) as response:
                if response.status == 200:
                    result = await response.json()
                    logger.info(f"–¢—Ä–æ—Ñ–µ–π {trophy_name} –æ–¥–æ–±—Ä–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {result}")
                    return True
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è —Ç—Ä–æ—Ñ–µ—è: {response.status}")
                    return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ —Ç—Ä–æ—Ñ–µ—è: {e}")
        return False

async def reject_trophy(user_id: int, trophy_name: str) -> bool:
    """–û—Ç–∫–ª–æ–Ω—è–µ—Ç —Ç—Ä–æ—Ñ–µ–π —á–µ—Ä–µ–∑ API"""
    try:
        async with aiohttp.ClientSession() as session:
            url = f"{API_BASE_URL}/api/trophies.reject"
            data = {
                "user_id": user_id,
                "trophy_name": trophy_name
            }
            
            async with session.post(url, data=data) as response:
                if response.status == 200:
                    result = await response.json()
                    logger.info(f"–¢—Ä–æ—Ñ–µ–π {trophy_name} –æ—Ç–∫–ª–æ–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {result}")
                    return True
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ç—Ä–æ—Ñ–µ—è: {response.status}")
                    return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —Ç—Ä–æ—Ñ–µ—è: {e}")
        return False
