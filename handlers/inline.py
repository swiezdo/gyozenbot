#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline queries –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–∏–ª–¥–æ–≤
"""

import aiohttp
import logging
from aiogram import Router
from aiogram.types import (
    InlineQuery,
    InlineQueryResultArticle,
    InputTextMessageContent
)

from config import API_BASE_URL, MINI_APP_URL

logger = logging.getLogger(__name__)
router = Router()

# –ú–∞–ø–ø–∏–Ω–≥ –∫–ª–∞—Å—Å–æ–≤ –∫ SVG –∏–∫–æ–Ω–∫–∞–º
# –ò–∫–æ–Ω–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞ GitHub, –∏—Å–ø–æ–ª—å–∑—É–µ–º raw.githubusercontent.com –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
# –ò–∑–≤–ª–µ–∫–∞–µ–º username/repo –∏–∑ MINI_APP_URL –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç
_mini_app_url = MINI_APP_URL.rstrip('/')
# –ò–∑ URL https://swiezdo.github.io/tsushimaru_app/ –∏–∑–≤–ª–µ–∫–∞–µ–º swiezdo/tsushimaru_app
if 'github.io' in _mini_app_url:
    # –ü–∞—Ä—Å–∏–º URL –≤–∏–¥–∞ https://username.github.io/repo_name/
    parts = _mini_app_url.replace('https://', '').replace('http://', '').split('/')
    if len(parts) >= 2:
        username = parts[0].replace('.github.io', '')
        repo_name = parts[1] if len(parts) > 1 else 'tsushimaru_app'
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º main –∫–∞–∫ –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –≤–µ—Ç–∫—É, –º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å master
        _raw_base = f'https://raw.githubusercontent.com/{username}/{repo_name}/main'
    else:
        _raw_base = 'https://raw.githubusercontent.com/swiezdo/tsushimaru_app/main'
else:
    # –ï—Å–ª–∏ –Ω–µ GitHub Pages, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π URL
    _raw_base = _mini_app_url

CLASS_ICONS = {
    '–°–∞–º—É—Ä–∞–π': f'{_raw_base}/docs/assets/icons/samurai.svg',
    '–û—Ö–æ—Ç–Ω–∏–∫': f'{_raw_base}/docs/assets/icons/hunter.svg',
    '–£–±–∏–π—Ü–∞': f'{_raw_base}/docs/assets/icons/assassin.svg',
    '–†–æ–Ω–∏–Ω': f'{_raw_base}/docs/assets/icons/ronin.svg'
}

async def search_builds(query: str, limit: int = 10) -> list:
    """–ü–æ–∏—Å–∫ –±–∏–ª–¥–æ–≤ —á–µ—Ä–µ–∑ API"""
    try:
        async with aiohttp.ClientSession() as session:
            url = f"{API_BASE_URL}/api/builds.search"
            params = {"query": query, "limit": limit}
            
            async with session.get(url, params=params, timeout=aiohttp.ClientTimeout(total=5)) as response:
                if response.status == 200:
                    data = await response.json()
                    return data.get('builds', [])
                else:
                    logger.error(f"API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status}")
                    return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –±–∏–ª–¥–æ–≤: {e}")
        return []

def truncate_text(text: str, max_length: int = 50) -> str:
    """–û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã"""
    if not text:
        return ""
    if len(text) <= max_length:
        return text
    return text[:max_length - 3] + "..."

@router.inline_query()
async def inline_query_handler(inline_query: InlineQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–∏–ª–¥–æ–≤"""
    query = inline_query.query.strip()
    
    # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
    if not query:
        await inline_query.answer(
            results=[],
            switch_pm_text="üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ç–µ–≥–∏ –∏–ª–∏ ID –±–∏–ª–¥–∞",
            switch_pm_parameter="help",
            cache_time=1
        )
        return
    
    # –ò—â–µ–º –±–∏–ª–¥—ã
    builds = await search_builds(query, limit=10)
    
    if not builds:
        await inline_query.answer(
            results=[],
            switch_pm_text="‚ùå –ë–∏–ª–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            switch_pm_parameter="help",
            cache_time=1
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è Telegram
    results = []
    
    for build in builds:
        # –ü–æ–ª—É—á–∞–µ–º –∏–∫–æ–Ω–∫—É –∫–ª–∞—Å—Å–∞
        build_class = build.get('class', '–°–∞–º—É—Ä–∞–π')
        class_icon_url = CLASS_ICONS.get(build_class, CLASS_ICONS['–°–∞–º—É—Ä–∞–π'])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º title: "–ö–ª–∞—Å—Å: –ù–∞–∑–≤–∞–Ω–∏–µ"
        title = f"{build_class}: {build['name']}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º description
        description_lines = []
        
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: –ê–≤—Ç–æ—Ä
        author = build.get('author', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        if author:
            description_lines.append(f"–ê–≤—Ç–æ—Ä: {author}")
        
        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: –¢–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
        tags = build.get('tags', [])
        if tags:
            tags_text = ', '.join(tags)
            description_lines.append(tags_text)
        else:
            # –ï—Å–ª–∏ —Ç–µ–≥–æ–≤ –Ω–µ—Ç, –º–æ–∂–µ–º –ø–æ–∫–∞–∑–∞—Ç—å ID
            description_lines.append(f"ID: {build['build_id']}")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
        # Telegram –º–æ–∂–µ—Ç –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –¥–æ 2 —Å—Ç—Ä–æ–∫ –≤ description
        description = "\n".join(description_lines[:2])  # –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º—É–º 2 —Å—Ç—Ä–æ–∫–∏
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–∞–Ω–¥—É /–±–∏–ª–¥ –≤ input_message_content
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤ —Ç–æ—Ç —á–∞—Ç, –æ—Ç–∫—É–¥–∞ –±—ã–ª —Å–¥–µ–ª–∞–Ω inline query
        # –ó–∞—Ç–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /–±–∏–ª–¥ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: thumbnail_url –≤—Ä–µ–º–µ–Ω–Ω–æ —É–±—Ä–∞–Ω, —Ç–∞–∫ –∫–∞–∫ Telegram –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç SVG
        # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ –±–∏–ª–¥–∞ –∫–∞–∫ –º–∏–Ω–∏–∞—Ç—é—Ä—É, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        thumbnail_url = None
        if build.get('photo_1'):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –±–∏–ª–¥–∞ –∫–∞–∫ –º–∏–Ω–∏–∞—Ç—é—Ä—É
            photo_url = build['photo_1']
            if not photo_url.startswith('http'):
                thumbnail_url = f"{API_BASE_URL}{photo_url}"
            else:
                thumbnail_url = photo_url
        
        result = InlineQueryResultArticle(
            id=str(build['build_id']),
            title=title,
            description=description,
            thumbnail_url=thumbnail_url,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ç–æ –±–∏–ª–¥–∞ –≤–º–µ—Å—Ç–æ SVG
            input_message_content=InputTextMessageContent(
                message_text=f"/–±–∏–ª–¥ {build['build_id']}"
            )
        )
        
        results.append(result)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await inline_query.answer(
        results=results,
        cache_time=300,  # –ö–µ—à–∏—Ä—É–µ–º –Ω–∞ 5 –º–∏–Ω—É—Ç
        is_personal=False  # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –¥–ª—è –≤—Å–µ—Ö
    )

# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: chosen_inline_result –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π /–±–∏–ª–¥
# –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ —á–∞—Ç —á–µ—Ä–µ–∑ input_message_content, –∏ –µ–≥–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç
# —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /–±–∏–ª–¥ –∏–∑ handlers/miniapp.py
# –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —á–∞—Ç

