import re
import time
import random
from aiogram import Router
from aiogram.types import Message

from waiting_phrases import WAITING_PHRASES
from ai_client import get_response
from image_generator import generate_image
from config import GROUP_ID, TOPIC_ID, OWNER_ID

router = Router()

PATTERN = re.compile(r"–≥[—ë–µ]–¥[–∑—Å][–µ—ç]–Ω", re.IGNORECASE)
RECENT_SECONDS = 60

def _is_recent(ts: float) -> bool:
    return time.time() - ts <= RECENT_SECONDS

def _is_allowed_context(m: Message) -> bool:
    # –õ–° ‚Äî —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    if m.chat.type == "private":
        return m.from_user and m.from_user.id == OWNER_ID
    # –ì—Ä—É–ø–ø–∞/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞ ‚Äî —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ –∏ —Ç–µ–º–∞
    if m.chat.type in ("group", "supergroup"):
        if m.chat.id != GROUP_ID:
            return False
        return bool(m.is_topic_message and m.message_thread_id == TOPIC_ID)
    return False

@router.message()
async def gyozen_entrypoint(message: Message):
    text = (message.text or "").strip()
    if not text:
        return
    if not _is_recent(message.date.timestamp()):
        return
    if not _is_allowed_context(message):
        return
    if not PATTERN.search(text):
        return

    # –í–µ—Ç–∫–∞ "–Ω–∞—Ä–∏—Å—É–π ..."
    m = re.search(r"–≥[—ë–µ]–¥[–∑—Å][–µ—ç]–Ω.*–Ω–∞—Ä–∏—Å—É–π(.*)$", text, re.IGNORECASE | re.DOTALL)
    if m:
        prompt_tail = (m.group(1) or "").strip()
        if not prompt_tail:
            await message.reply("–û–ø–∏—à–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å.")
            return
        wait_msg = await message.reply("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ... üé®")
        url = await generate_image(prompt_tail)
        if url:
            await wait_msg.delete()
            await message.reply_photo(url, caption="–ì–æ—Ç–æ–≤–æ. üé≠")
        else:
            await wait_msg.edit_text("–ù–µ –≤—ã—à–ª–æ —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –∏–Ω–∞—á–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å.")
        return

    # –û–±—ã—á–Ω—ã–π –ò–ò-–æ—Ç–≤–µ—Ç
    waiting = await message.reply(random.choice(WAITING_PHRASES))
    reply = await get_response(text)
    try:
        await waiting.edit_text(reply)
    except Exception:
        await message.reply(reply)
